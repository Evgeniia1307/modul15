apipkg==1.5
asn1crypto==1.3.0
atomicwrites==1.3.0
attrs==19.3.0
backcall==0.1.0
beautifulsoup4==4.8.2
boto==2.49.0
certifi==2019.11.28
cffi==1.14.0
chardet==3.0.4
colorama==0.4.3
coverage==5.0.3
cryptography==2.8
decorator==4.4.2
entrypoints==0.3
execnet==1.7.1
flake8==3.7.9
idna==2.9
importlib-metadata==1.5.0
ipdb==0.13.2
ipython==7.13.0
ipython-genutils==0.2.0
jedi==0.16.0
lxml==4.5.0
mccabe==0.6.1
more-itertools==8.2.0
nose==1.3.7
packaging==20.3
parameterized==0.7.1
parso==0.6.2
pdfminer.six==20200124
pickleshare==0.7.5
pluggy==0.13.1
portalocker==1.5.2
prompt-toolkit==3.0.3
py==1.8.1
pycodestyle==2.5.0
pycparser==2.20
pycryptodome==3.9.7
pyflakes==2.1.1
Pygments==2.6.1
PyMySQL==0.9.3
pyOpenSSL==19.1.0
pyotp==2.3.0
pyparsing==2.4.6
pytest==5.3.5
pytest-cov==2.8.1
pytest-forked==1.1.3
pytest-html==2.0.1
pytest-metadata==1.8.0
pytest-ordering==0.6
pytest-rerunfailures==8.0
pytest-xdist==1.31.0
pywin32==227
requests==2.23.0
selenium==3.141.0
seleniumbase==1.36.1
setuptools-scm==3.5.0
six==1.14.0
sortedcontainers==2.1.0
soupsieve==2.0
tqdm==4.43.0
traitlets==4.3.3
urllib3==1.25.8
wcwidth==0.1.8
zipp==3.1.0

from seleniumbase import BaseCase

class NavigationTest(BaseCase):

    # задаем базовый урл и переменную-словарь
    def setup_class(self):
        self.base_url = "https://www.babyshop.com"
        self.menu_dict = {"Brands":['//a[@data-class="brand"]', self.base_url+"/brands/s/618"],
                     "Сlothing":['//a[@data-class="babyclothes"]', self.base_url+"/clothing/s/619"],
                     "Footwear":['//a[@data-class="babyshoes"]',self.base_url+"/footwear/s/620"]
            }
    def test_basket(self):
        # Идем на страницу товаров
        self.get(self.base_url+'/dolce-gabbana/s/1495')
        # выбор товара
        self.hover_and_click('//article[1]', '//article[1]//div[@class="quickshop-button "]')
        # выбор размера
        self.click('//div[@id="id-slct"]')
        self.click('//div[@id="id-slct"]/ul/li[2]')
        #
        
        self.click('//button[@class="add-to-cart green large"]')
        self.sleep(0.1)
        self.click('//a[@class="to-checkout white button"]')
        
from seleniumbase import BaseCase

class NavigationTest(BaseCase):

    # задаем базовый урл и переменную-словарь
    def setup_class(self):
        self.base_url = "https://www.babyshop.com"
        self.menu_dict = {"Brands":['//a[@data-class="brand"]', self.base_url+"/brands/s/618"],
                     "Сlothing":['//a[@data-class="babyclothes"]', self.base_url+"/clothing/s/619"],
                     "Footwear":['//a[@data-class="babyshoes"]',self.base_url+"/footwear/s/620"]
            }


    # проверяем пункты меню
    def test_01_menu(self):
        self.get(self.base_url)
        for item in self.menu_dict:
            print(f"Меню {item}")
            self.click(self.menu_dict[item][0])
            # получаем текущий урл в переменную curr_url
            curr_url = self.get_current_url()
            # проверка соответствия полученного и ожидаемого урл
            self.assert_equal(curr_url, self.menu_dict[item][1])

    def test_02_sub_menu(self):
        self.get(self.base_url)
        sub = '//a[@href="/boots-and-winter-shoes/s/673"]'
        #'//div[@class="babyshoes mid-navigation-container"]/div[@class="content c-16"]/div[@class="c-8"]/ul[2]/li[1]/a'
        # '//*[@id="mid-navigation"]/div[@class="babyshoes mid-navigation-container"]//div[@class="c-8"]/ul[2]/li[1]/a'
        #
        #'//*[@id="mid-navigation"]/div[9]/div/div[1]/ul[2]/li[1]/a'
        self.hover_and_click('//a[@data-class="babyshoes"]', sub)

    def test_03_find_items(self):

        self.get(self.base_url)
        # send_keys - это печать текста в поле (отправка клавиш)
        self.send_keys('//*[@id="search-form"]/input', "Sirona S i-Size Car Seat")
        # клик на кнопке поиска
        self.click('//*[@id="search-form"]/button')
        # получаем  все элементы по заданному х-пазу и считаем длинну списка 
        count = len(self.find_elements("//article"))
        # сверяем длину и ожидаемый результат
        self.assert_equal(count,5)
        # пример, как можно задать паузу
        self.sleep(2)
  
    def test_04_basket(self):
        # Идем на страницу товаров
        self.get(self.base_url+'/dolce-gabbana/s/1495')
        # сохраняем название первого товара страницы
        item_name = self.get_text('//article[1]/a/div[2]/p[2]')
        # эмулируем наведение мышкой и клик на кнопке "Add to cart"
        self.hover_and_click('//article[1]','//article[1]/a/div[1]/div/div[1]/p')
        # выбираем размер в выпадающем меню
        self.click('//*[@id="id-slct"]/div')
        self.click('//*[@id="id-slct"]/ul/li[2]')
        # эмулируем наведение мышкой и клик на кнопке "Add to cart"
        self.click('//article[1]/div[1]/form/div/button/span[1]')
        # чуть ждем отработки скрипта
        self.sleep(0.1)
        # переходим к оплате
        self.click('//article[1]/div[1]/form/div/a')
        # сохраняем название товара в корзине
        basket_name = self.get_text('//a[@class="product-name c-6"]/p[2]')
        # название выбранного товара и товара в корзине должно совпасть
        self.assert_equal(item_name,basket_name)
        # удаляем товар
        self.click('//a[@class="remove"]')
        #self.sleep(0.1)
        # Получаем сообщение, что корзина пуста
        empty_text = self.get_text('//div[@class="simple-page"]/h1')
        # проверяем его
        self.assert_equal(empty_text, "Your cart is empty")

    def test_05_change_region(self):
        # 
        self.get(self.base_url+'/dolce-gabbana/s/1495')
        # получаем английский текст
        eng_text = self.get_text('//article[1]/a/div[2]/p[2]')
        # переход в раздел языковых параметров и их смена
        self.click('//*[@id="top-navigation-links"]/ul/li[1]/a')
        self.click('//a[@title="Russian"]')
        self.sleep(0.1)
        self.click('//a[@title="USA"]')
        # переход в раздел товаров на русском
        self.get('https://ru.babyshop.com/dolce-gabbana/s/1495')
        # получаем русский текст
        ru_text = self.get_text('//article[1]/a/div[2]/p[2]')
        # английский текст не должен совпадать с русским
        self.assert_not_equal(eng_text, ru_text)



# Auto detect text files and perform LF normalization
* text=auto
